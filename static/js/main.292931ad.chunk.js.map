{"version":3,"sources":["Component/ContactList/ContactList.module.css","Component/Filter/Filter.module.css","redux/types.js","redux/action.js","Component/ContactForm/ContactForm.js","Component/ContactList/ContactList.js","App.js","reportWebVitals.js","redux/reducer.js","redux/store.js","index.js"],"names":["module","exports","name","number","type","types","payload","id","shortid","generate","connect","dispath","onSubmit","actions","useState","setName","setNumber","handleChange","e","currentTarget","value","reset","nameInputId","numberInputId","className","preventDefault","htmlFor","onChange","pattern","title","required","state","contacts","phonebook","onDeleteContact","s","container","map","item","onClick","btn","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","combineReducers","filter","rootReducer","reducer","store","createStore","composeWithDevTools","console","log","getState","dispatch","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.292931ad.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactList_container__12Nj1\",\"item\":\"ContactList_item__3iqfv\",\"btn\":\"ContactList_btn__1WlrI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SearchContainer\":\"Filter_SearchContainer__12ZzS\",\"SearchName\":\"Filter_SearchName__3xFQb\",\"ContName\":\"Filter_ContName__2g_o6\",\"InputSearch\":\"Filter_InputSearch__2rF1z\"};","export default {\n  GET_FILTER: 'book/getFilter',\n  ON_SEARCH: 'book/onSearchChange',\n  DEL_CONTACT: 'book/onDeleteContact',\n  ADD_CONTACT: 'book/addContact',\n};\n","import types from './types';\nimport shortid from 'shortid';\n\nexport const myAction = value => ({\n  type: 'MY_ACTION',\n  payload: value,\n});\n\nconst addContact = ({ name, number }) => ({\n  type: types.ADD_CONTACT,\n  payload: {\n    id: shortid.generate(),\n    name,\n    number,\n  },\n});\n\nconst deleteContact = id => ({\n  types: types.DEL_CONTACT,\n  payload: id,\n});\n\nexport default { addContact, deleteContact };\n","import { useState } from 'react';\nimport shortid from 'shortid';\nimport './ContactForm.css';\nimport { connect } from 'react-redux';\nimport actions from '../../redux/action';\n\nfunction ContactForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    onSubmit({ name, number });\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const nameInputId = shortid.generate();\n  const numberInputId = shortid.generate();\n\n  return (\n    <form className=\"Input-container\" onSubmit={handleSubmit}>\n      <h3 className=\"Input-name\"> Name </h3>\n      <label htmlFor={nameInputId}>\n        <input\n          className=\"Input\"\n          value={name}\n          onChange={handleChange}\n          type=\"text\"\n          name=\"name\"\n          id={nameInputId}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label className=\"TelInputContainer\" htmlFor={numberInputId}>\n        <h3 className=\"Input-name\"> Number </h3>\n        <input\n          value={number}\n          onChange={handleChange}\n          type=\"tel\"\n          name=\"number\"\n          id={numberInputId}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n      <button type=\"submit\" className=\"input-btn\">\n        Add contact\n      </button>\n    </form>\n  );\n}\nconst mapDispatchToProps = dispath => ({\n  onSubmit: (name, number) => dispath(actions.addContact(name, number)),\n});\nexport default connect(null, mapDispatchToProps)(ContactForm);\n\n// class OldContactForm extends Component {\n//   state = {\n//     contacts: [],\n//     name: '',\n//     number: '',\n//   };\n\n//   nameInputId = shortid.generate();\n//   numberInputId = shortid.generate();\n\n//   handleChange = e => {\n//     this.setState({\n//       [e.currentTarget.name]: e.currentTarget.value,\n//     });\n//   };\n\n//   handleSubmit = e => {\n//     e.preventDefault();\n\n//     this.props.onSubmit(this.state);\n\n//     this.reset();\n//   };\n//   reset = () => {\n//     this.setState({ name: '', number: '' });\n//   };\n\n//   render() {\n//     return (\n//       <form className=\"Input-container\" onSubmit={this.handleSubmit}>\n//         <h3 className=\"Input-name\"> Name </h3>\n//         <label htmlFor={this.nameInputId}>\n//           <input\n//             className=\"Input\"\n//             value={this.state.name}\n//             onChange={this.handleChange}\n//             type=\"text\"\n//             name=\"name\"\n//             id={this.nameInputId}\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//             required\n//           />\n//         </label>\n//         <label className=\"TelInputContainer\" htmlFor={this.numberInputId}>\n//           <h3 className=\"Input-name\"> Number </h3>\n//           <input\n//             value={this.state.number}\n//             onChange={this.handleChange}\n//             type=\"tel\"\n//             name=\"number\"\n//             id={this.numberInputId}\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//             required\n//           />\n//         </label>\n//         <button type=\"submit\" className=\"input-btn\">\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n\n// export default ContactForm;\n","import React from 'react';\nimport s from './ContactList.module.css';\nimport { connect } from 'react-redux';\nimport actions from '../../redux/action';\n\nconst ContactList = ({ contacts, onDeleteContact }) => (\n  <ul className={s.container}>\n    {contacts.map(({ name, number, id }) => (\n      <li key={id} className={s.item}>\n        {name}: {number}\n        <button type=\"button\" onClick={() => onDeleteContact(id)} className={s.btn}>\n          Delete\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nconst mapStateToProps = state => ({ contacts: state.phonebook.contacts });\n\n// const mapDispatchToProps = dispath => ({\n//   onDeleteContact: id => dispatch(actions.deleteContact(id)),\n// });\n\nexport default connect(mapStateToProps)(ContactList);\n","import './App.css';\nimport { connect } from 'react-redux';\nimport { useState } from 'react';\nimport shortid from 'shortid';\nimport ContactForm from './Component/ContactForm/ContactForm';\nimport Filter from './Component/Filter/Filter';\nimport ContactList from './Component/ContactList/ContactList';\nimport useLocalStorage from './Component/LocalStorage/LocalStorage';\n\nexport default function App() {\n  // const [contacts, setContacts] = useLocalStorage('contacts', [\n  //   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  //   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  //   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  //   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  // ]);\n  // const [filter, setFilter] = useState('');\n\n  // const getFilterSearch = () => {\n  //   const normalizedFilter = filter.toLowerCase();\n  //   return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n  // };\n\n  // const onSearchChange = e => {\n  //   setFilter(e.currentTarget.value);\n  // };\n\n  // const onDeleteContact = id => {\n  //   setContacts(contacts.filter(contact => contact.id !== id));\n  // };\n\n  // const addContact = ({ name, number }) => {\n  //   const contact = {\n  //     id: shortid.generate(),\n  //     name,\n  //     number,\n  //   };\n  //   const equalName = contacts.find(item => item.name === contact.name);\n\n  //   if (equalName) return alert(`${contact.name} is already in contacts`);\n\n  //   setContacts(prevContacts => [...prevContacts, contact]);\n  // };\n\n  return (\n    <>\n      <div className=\"Input-form\">\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2 className=\"SearchName\">Contact</h2>\n        <ContactList />\n        {/* contacts={getFilterSearch()} onDeleteContact={onDeleteContact} /> */}\n      </div>\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux';\nimport types from './types';\n\n// {\n//     phonebook: {\n//     contacts: [],\n//     filter: '',\n//   },\n// }\n\nconst contacts = (state = [], { type, payload }) => {\n  switch (type) {\n    case types.ADD_CONTACT:\n      return [...state, payload];\n\n    case types.DEL_CONTACT:\n      return state.filter(({ id }) => id !== payload);\n    default:\n      return state;\n  }\n};\n\nconst filter = (state = '', action) => {\n  return state;\n};\n\nexport default combineReducers({\n  contacts,\n  filter,\n});\n","import { createStore, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducer from './reducer';\n\n// const reducer = (state = {}, action) => {\n//   console.log('🚀 ~ file: store.js ~ line 5 ~ reducer ~ action', action);\n//   return state;\n// };\n\nconst rootReducer = combineReducers({\n  phonebook: reducer,\n});\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\n\nimport { myAction } from './redux/action';\n\nconsole.log('🚀 ~ file: index.js ~ line 7 ~ store', store.getState());\nstore.dispatch(myAction());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}